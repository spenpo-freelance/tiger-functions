#!/bin/bash

# Usage:
#   Deploy tigergrades microservice resources to Azure:
#     ./deploy.sh -e production
#
#   Options:
#     -e            Environment

# Optional configuration. If not provided, the script will prompt for input.
tgafAppIdUri="https://az.tigergrades.com"
tgwaAppIdUri="https://spenpo.onmicrosoft.com"
tgwaBaseUrl="https://tigergrades.com"
tgwaUser="tgaf_app_3749tuobtr81tm3v@tigergrades.com"
tgwaPassword="h4b5HGayjzCFiVGGlnhFIkdL"
userPrincipalName="spenpo@spenpo.onmicrosoft.com"
# End configuration

while getopts ":e:a:" opt; do
  case ${opt} in
    e)
      environment=$OPTARG
      ;;
  esac
done

if [ -z "$environment" ]; then
  echo "Error: Environment is required (-e)"
  exit 1
fi

# Get TGAF client id
if [ -z "$tgafAppIdUri" ]; then
    read -p "Enter the app ID URI for Tiger Grades Azure Functions from Azure Entra ID: " tgafAppIdUri
fi

tgafClientId=$(az ad app show --id $tgafAppIdUri --query appId --output tsv)

if [ -z "$tgafClientId" ]; then
  echo "Error: Failed to get TGAF client ID"
  exit 1
fi

echo "TGAF client ID retrieved successfully"

# Get TGWA client id
if [ -z "$tgwaAppIdUri" ]; then
    read -p "Enter the app ID URI for Tiger Grades Web App from Azure Entra ID: " tgwaAppIdUri
fi

tgwaClientId=$(az ad app show --id $tgwaAppIdUri --query appId --output tsv)

if [ -z "$tgwaClientId" ]; then
  echo "Error: Failed to get TGWA client ID"
  exit 1
fi

echo "TGWA client ID retrieved successfully"

# Create a new client secret for the TGAF application
echo "Creating client secret for application ID: $tgafClientId"
echo "Running az ad app credential reset command..."

# Create a temporary file for the output
TEMP_OUT=$(mktemp)

# Run the command and redirect ONLY the stdout to our temp file
# This avoids the warnings which go to stderr
az ad app credential reset \
  --id $tgafClientId \
  --append \
  --display-name "Secret for tigergrades-${environment} function app" > "$TEMP_OUT" 2>&1

# Check if the command was successful
if [ $? -ne 0 ]; then
  echo "Error: Azure CLI command failed:"
  cat "$TEMP_OUT"
  rm "$TEMP_OUT"
  exit 1
fi

# Try to extract the password directly with simple grep 
tgafClientSecret=$(grep -o '"password": *"[^"]*"' "$TEMP_OUT" | grep -o '"[^"]*"$' | tr -d '"')

# If that fails, try with az command output formatting
if [ -z "$tgafClientSecret" ]; then
  echo "First extraction method failed, trying az command with TSV output..."
  
  # Try a direct approach using TSV output
  tgafClientSecret=$(az ad app credential reset \
    --id $tgafClientId \
    --append \
    --display-name "Secret for tigergrades-${environment} function app" \
    --query password \
    --output tsv 2>/dev/null)
fi

# Clean up temp file
rm "$TEMP_OUT"

# Debug output
echo "Secret value length: ${#tgafClientSecret}"
if [ ${#tgafClientSecret} -lt 10 ]; then
  echo "Warning: Secret seems too short or empty"
fi

# Check for empty secret
if [ -z "$tgafClientSecret" ]; then
  echo "Error: Failed to create or extract client secret."
  exit 1
fi

echo "Client secret created successfully"

# Create a new client secret for the TGWA application
echo "Creating client secret for application ID: $tgwaClientId"
echo "Running az ad app credential reset command..."

# Create a temporary file for the output
TEMP_OUT=$(mktemp)

# Run the command and redirect ONLY the stdout to our temp file
# This avoids the warnings which go to stderr
az ad app credential reset \
  --id $tgwaClientId \
  --append \
  --display-name "ONE TIME USE client secret generated by deploy script" > "$TEMP_OUT" 2>&1

# Check if the command was successful
if [ $? -ne 0 ]; then
  echo "Error: Azure CLI command failed:"
  cat "$TEMP_OUT"
  rm "$TEMP_OUT"
  exit 1
fi

# Try to extract the password directly with simple grep 
tgwaClientSecret=$(grep -o '"password": *"[^"]*"' "$TEMP_OUT" | grep -o '"[^"]*"$' | tr -d '"')

# If that fails, try with az command output formatting
if [ -z "$tgwaClientSecret" ]; then
  echo "First extraction method failed, trying az command with TSV output..."
  
  # Try a direct approach using TSV output
  tgwaClientSecret=$(az ad app credential reset \
    --id $tgwaClientId \
    --append \
    --display-name "ONE TIME USE client secret generated by deploy script" \
    --query password \
    --output tsv 2>/dev/null)
fi

# Clean up temp file
rm "$TEMP_OUT"

# Debug output
echo "Secret value length: ${#tgwaClientSecret}"
if [ ${#tgwaClientSecret} -lt 10 ]; then
  echo "Warning: Secret seems too short or empty"
fi

# Check for empty secret
if [ -z "$tgwaClientSecret" ]; then
  echo "Error: Failed to create or extract client secret."
  exit 1
fi

echo "Client secret created successfully"

# Get OneDrive user ID
if [ -z "$userPrincipalName" ]; then
  read -p "Enter your user principal name (UPN): " userPrincipalName
fi

driveUserId=$(m365 entra user list --query "[?userPrincipalName=='${userPrincipalName}'].[id]" --output text)

if [ -z "$driveUserId" ]; then
  echo "Error: Failed to get OneDrive user ID"
  exit 1
fi

echo "OneDrive user ID retrieved successfully"

# Extract domainName from userPrincipalName
domainName=$(echo $userPrincipalName | cut -d '@' -f 2)

# Get tenant ID
tenantId=$(m365 tenant id get --domainName $domainName | tr -d '"')

if [ -z "$tenantId" ]; then
  echo "Error: Failed to get tenant ID"
  exit 1
fi

echo "Tenant ID retrieved successfully"

# Get OneDrive item IDs
teachersDirItemId=$(node $HOME/Desktop/dev/tiger-functions/infra/getDriveItemIDs.js \
  $tenantId \
  $tgwaClientId \
  $tgwaClientSecret \
  $driveUserId \
  "/tiger_grades/$environment/teachers/")

if [ -z "$teachersDirItemId" ]; then
  echo "Error: Failed to get teachers directory item ID"
  exit 1
fi

echo "Teachers directory item ID retrieved successfully"

gradebookTemplateItemId=$(node $HOME/Desktop/dev/tiger-functions/infra/getDriveItemIDs.js \
  $tenantId \
  $tgwaClientId \
  $tgwaClientSecret \
  $driveUserId \
  "/tiger_grades/$environment/templates/gradebook.xlsx")

if [ -z "$gradebookTemplateItemId" ]; then
  echo "Error: Failed to get gradebook template item ID"
  exit 1
fi

echo "Gradebook template item ID retrieved successfully"

# Prompt for TGAF credentials
if [ -z "$tgwaBaseUrl" ]; then
  read -p "Enter TGWA base URL: " tgwaBaseUrl
fi
if [ -z "$tgwaUser" ]; then
  read -p "Enter TGWA app user: " tgwaUser
fi
if [ -z "$tgwaPassword" ]; then
  read -p "Enter TGWA app password: " tgwaPassword
fi

# Create resource group if it doesn't exist
if [ $(az group exists --name tigergrades_group_${environment}) = false ]; then
  echo "Creating resource group tigergrades_group_${environment}"
  az group create --name tigergrades_group_${environment} --location eastasia
else
  echo "Error: Resource group tigergrades_group_${environment} already exists"
  exit 1
fi

# Deploy resources
echo "Deploying resources to tigergrades_group_${environment}"
az deployment group create --template-file infra/main.bicep -g tigergrades_group_${environment} \
  --parameters environment=${environment} \
  tgafClientId=${tgafClientId} \
  tgafClientSecret=${tgafClientSecret} \
  tgwaBaseUrl=${tgwaBaseUrl} \
  tgwaUser=${tgwaUser} \
  tgwaPassword=${tgwaPassword} \
  driveUserId=${driveUserId} \
  teachersDirItemId=${teachersDirItemId} \
  gradebookTemplateItemId=${gradebookTemplateItemId} \
  tgafTokenAudience=${tgafAppIdUri} \
  tgwaClientId=${tgwaClientId}

# Waiting for function app
echo "Waiting for function app tigergrades-${environment} to be ready..."
retry_count=0
max_retries=30
while [ $retry_count -lt $max_retries ]
do
  if az functionapp show --name tigergrades-${environment} --resource-group tigergrades_group_${environment} >/dev/null 2>&1; then
    echo "Function app tigergrades-${environment} is ready"
    break
  else
    echo "Function app not ready yet, waiting 10 seconds..."
    sleep 10
    retry_count=$((retry_count+1))
  fi
done

if [ $retry_count -eq $max_retries ]; then
  echo "Error: Function app tigergrades-${environment} not ready after $(($max_retries * 10)) seconds"
  exit 1
fi

# Deploy service bus queues
echo "Deploying service bus queues"
az servicebus queue create --resource-group tigergrades_group_${environment} \
  --namespace-name tiger-grades-bus-${environment} \
  --name monitor-copy-status \
  --max-size 1024 \
  --enable-partitioning true

az servicebus queue create --resource-group tigergrades_group_${environment} \
  --namespace-name tiger-grades-bus-${environment} \
  --name invite-edit \
  --max-size 1024 \
  --enable-partitioning true

# Publish function app
echo "Publishing function app tigergrades-${environment}"
func azure functionapp publish tigergrades-${environment}

# Add information about manual GitHub Actions setup
echo ""
echo "============== GitHub Actions Setup =============="
echo "To set up GitHub Actions deployment for tigergrades-${environment}:"
echo "1. Navigate to the Azure Portal"
echo "2. Go to your function app (tigergrades-${environment})"
echo "3. Select 'Deployment Center' from the left navigation"
echo "4. Choose 'GitHub' as the source"
echo "5. Follow the prompts to connect to your GitHub repository"
echo "This method is required for Function Apps on the Flex Consumption plan."
echo "=================================================="
