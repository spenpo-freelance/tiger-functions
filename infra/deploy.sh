#!/bin/bash

# Usage:
#   Deploy tigergrades microservice resources to Azure:
#     ./deploy.sh -e production
#
#   Options:
#     -e            Environment

# Optional configuration. If not provided, the script will prompt for input.
tgafAppIdUri=""
tgwaAppIdUri=""
tgwaBaseUrl=""
tgwaUser=""
tgwaPassword=""
userPrincipalName=""
# End configuration

while getopts ":e:a:" opt; do
  case ${opt} in
    e)
      environment=$OPTARG
      ;;
  esac
done

if [ -z "$environment" ]; then
  echo "Error: Environment is required (-e)"
  exit 1
fi

# Create resource group if it doesn't exist
if [ $(az group exists --name tigergrades_group_${environment}) = false ]; then
  echo "Creating resource group tigergrades_group_${environment}"
  az group create --name tigergrades_group_${environment} --location eastasia
else
  echo "Error: Resource group tigergrades_group_${environment} already exists"
  exit 1
fi

# Get TGAF client id
if [ -z "$tgafAppIdUri" ]; then
    read -p "Enter the app ID URI for Tiger Grades Azure Functions from Azure Entra ID: " tgafAppIdUri
fi

tgafClientId=$(az ad app show --id $tgafAppIdUri --query appId --output tsv)

if [ -z "$tgafClientId" ]; then
  echo "Error: Failed to get TGAF client ID"
  exit 1
fi

echo "TGAF client ID retrieved successfully"

# Get TGWA client id
if [ -z "$tgwaAppIdUri" ]; then
    read -p "Enter the app ID URI for Tiger Grades Web App from Azure Entra ID: " tgwaAppIdUri
fi

tgwaClientId=$(az ad app show --id $tgwaAppIdUri --query appId --output tsv)

if [ -z "$tgwaClientId" ]; then
  echo "Error: Failed to get TGWA client ID"
  exit 1
fi

echo "TGWA client ID retrieved successfully"

# Create a new client secret for the TGAF application
echo "Creating client secret for application ID: $tgafClientId"
tgafClientSecret=$(az ad app credential reset \
  --id $tgafClientId \
  --append \
  --query "password" \
  -o tsv \
  --display-name "Secret for tigergrades-${environment} function app")

if [ -z "$tgafClientSecret" ]; then
  echo "Error: Failed to create client secret"
  exit 1
fi

echo "Client secret created successfully"

# Create a new client secret for the TGWA application
echo "Creating client secret for application ID: $tgwaClientId"
tgwaClientSecret=$(az ad app credential reset \
  --id $tgwaClientId \
  --append \
  --query "password" \
  -o tsv \
  --display-name "ONE TIME USE client secret generated by deploy script")

if [ -z "$tgwaClientSecret" ]; then
  echo "Error: Failed to create client secret"
  exit 1
fi

echo "Client secret created successfully"

# Prompt for TGAF credentials
if [ -z "$tgwaBaseUrl" ]; then
  read -p "Enter TGAF base URL: " tgwaBaseUrl
fi
if [ -z "$tgwaUser" ]; then
  read -p "Enter TGAF username: " tgwaUser
fi
if [ -z "$tgwaPassword" ]; then
  read -p "Enter TGAF password: " tgwaPassword
fi

# Get OneDrive user ID
if [ -z "$userPrincipalName" ]; then
  read -p "Enter your user principal name (UPN): " userPrincipalName
fi

driveUserId=$(m365 entra user list --query "[?userPrincipalName=='${userPrincipalName}'].[id]" --output text)

if [ -z "$driveUserId" ]; then
  echo "Error: Failed to get OneDrive user ID"
  exit 1
fi

echo "OneDrive user ID retrieved successfully"

# Extract domainName from userPrincipalName
domainName=$(echo $userPrincipalName | cut -d '@' -f 2)

# Get tenant ID
tenantId=$(m365 tenant id get --domainName $domainName | tr -d '"')

if [ -z "$tenantId" ]; then
  echo "Error: Failed to get tenant ID"
  exit 1
fi

echo "Tenant ID retrieved successfully"

# Get OneDrive item IDs
teachersDirItemId=$(node $HOME/Desktop/dev/tiger-functions/infra/getDriveItemIDs.js \
  $tenantId \
  $tgwaClientId \
  $tgwaClientSecret \
  $driveUserId \
  "/tiger_grades/$environment/teachers/")

if [ -z "$teachersDirItemId" ]; then
  echo "Error: Failed to get teachers directory item ID"
  exit 1
fi

echo "Teachers directory item ID retrieved successfully"

gradebookTemplateItemId=$(node $HOME/Desktop/dev/tiger-functions/infra/getDriveItemIDs.js \
  $tenantId \
  $tgwaClientId \
  $tgwaClientSecret \
  $driveUserId \
  "/tiger_grades/$environment/templates/gradebook.xlsx")

if [ -z "$gradebookTemplateItemId" ]; then
  echo "Error: Failed to get gradebook template item ID"
  exit 1
fi

echo "Gradebook template item ID retrieved successfully"

# Deploy resources
echo "Deploying resources to tigergrades_group_${environment}"
az deployment group create --template-file infra/main.bicep -g tigergrades_group_${environment} \
  --parameters environment=${environment} \
  tgafClientId=${tgafClientId} \
  tgafClientSecret=${tgafClientSecret} \
  tgwaBaseUrl=${tgwaBaseUrl} \
  tgwaUser=${tgwaUser} \
  tgwaPassword=${tgwaPassword} \
  driveUserId=${driveUserId} \
  teachersDirItemId=${teachersDirItemId} \
  gradebookTemplateItemId=${gradebookTemplateItemId} \
  tgafTokenAudience=${tgafAppIdUri} \
  tgwaClientId=${tgwaClientId}

# Publish function app
echo "Waiting for function app tigergrades-${environment} to be ready..."
retry_count=0
max_retries=30
while [ $retry_count -lt $max_retries ]
do
  if az functionapp show --name tigergrades-${environment} --resource-group tigergrades_group_${environment} >/dev/null 2>&1; then
    echo "Function app tigergrades-${environment} is ready"
    break
  else
    echo "Function app not ready yet, waiting 10 seconds..."
    sleep 10
    retry_count=$((retry_count+1))
  fi
done

if [ $retry_count -eq $max_retries ]; then
  echo "Error: Function app tigergrades-${environment} not ready after $(($max_retries * 10)) seconds"
  exit 1
fi

echo "Publishing function app tigergrades-${environment}"
func azure functionapp publish tigergrades-${environment}
